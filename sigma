local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Lib/main/source.lua"))()
local m = lib:Window("SIGMA MENU")
local players = game.Players
local plr = players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

getgenv().settings = {
    speedhack = false,
    noclip = false,
    recording = false,
    playback = false
}

local recordedMovements = {}
local startTime = 0

-- Function to start recording movements
local function startRecording()
    recordedMovements = {}
    startTime = tick()
    getgenv().settings.recording = true
end

-- Function to stop recording
local function stopRecording()
    getgenv().settings.recording = false
end

-- Function to play back recorded movements
local function playBackMovements()
    if #recordedMovements == 0 then return end
    getgenv().settings.playback = true
    local playbackStartTime = tick()
    for _, movement in ipairs(recordedMovements) do
        local delayTime = movement.timestamp - (playbackStartTime - startTime)
        task.wait(delayTime)
        if not getgenv().settings.playback then break end
        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            plr.Character.HumanoidRootPart.CFrame = movement.cframe
        end
    end
    getgenv().settings.playback = false
end

-- Record player movements
RunService.Heartbeat:Connect(function()
    if getgenv().settings.recording and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
        table.insert(recordedMovements, {
            cframe = plr.Character.HumanoidRootPart.CFrame,
            timestamp = tick() - startTime
        })
    end
end)

-- Add UI options
m:Button("Start Recording", function()
    startRecording()
end)

m:Button("Stop Recording", function()
    stopRecording()
end)

m:Button("Play Movements", function()
    playBackMovements()
end)

-- Existing Toggles
m:Toggle("SpeedHack", false, function (bool)
    getgenv().settings.speedhack = bool
    while getgenv().settings.speedhack do
        local delta = RunService.Heartbeat:Wait()
        if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
            plr.Character:TranslateBy(plr.Character.Humanoid.MoveDirection * 4 * delta * 50)
        end
    end
end)

local noclipConnection = nil
m:Toggle("Noclip", false, function (bool)
    getgenv().settings.noclip = bool
    if getgenv().settings.noclip then
        local camera = workspace.CurrentCamera
        noclipConnection = RunService.RenderStepped:Connect(function()
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = plr.Character.HumanoidRootPart
                local moveDirection = Vector3.new(0, 0, 0)

                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end

                rootPart.Velocity = moveDirection * 50
                for _, part in pairs(plr.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        if plr.Character then
            for _, part in pairs(plr.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end)

m:Label("~ DZINOLD SIGMA", Color3.fromRGB(127, 143, 166))
